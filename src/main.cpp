#include <iostream>

#include <main.hpp>
#include <utility/util.hpp>

extern void test_p4_1_parity();
extern void test_p4_2_bit_swap();
extern void test_p4_3_bit_reverse();
extern void test_closed_same_bit_cnt_num();
extern void test_add_mul_with_bit_op();
extern void test_div_with_bit_op();
extern void test_pow_bit_op();
extern void test_num_reverse();
extern void test_palindrom_num();
extern void test_p4_10_random_num_bit_op();
extern void test_p4_11_intersect_rec();
extern void test_p4_tmp_1_4_align();
extern void test_p5_1_dutch_flag_partition();
extern void test_p5_2_add_one();
extern void test_p5_3_mul_bignum();
extern void test_p5_4_array_mv();
extern void test_p5_5_rem_dup();
extern void test_stock_trading();
extern void test_p5_7_stock_trading_twice();
extern void test_p5_8_quicksort_repeat_big_small();
extern void test_p5_9_generate_prime();
extern void test_p5_10_permutation_locating();
extern void test_p5_11_permutation_next();
extern void test_p5_12_sampling_offline();
extern void test_p5_13_sampling_online();
extern void test_p5_14_random_permutation();
extern void test_p5_15_random_subset();
extern void test_p5_16_non_uniform_random();
extern void test_p5_17_validate_sudoku_sol();
extern void test_p5_18_read_spiral_order();
extern void test_p5_19_rotate_right();
extern void test_p5_20_pascal_triangle();
extern void test_p6_1_itos_stoi();
extern void test_p6_2_base_transform();
extern void test_p6_3_spreadsheet_colum_num();
extern void test_p6_4_replace_rm();
extern void test_p6_5_palindrom();
extern void test_p6_6_reverse_word();
extern void test_p6_7_look_and_say();
extern void test_p6_8_roman_to_i();
extern void test_p6_9_gen_valid_ip();
extern void test_p6_10_snake_string();
extern void test_p6_11_string_compress();
extern void test_p6_12_rabin_karp_search();
extern void test_p7_0_linked_list();
extern void test_p7_1_merge_sorted_linkedlist();
extern void test_p7_2_reverse_linked_list();
extern void test_p7_3_cycle_detect();
extern void test_p7_4_overlap_check();
extern void test_p7_5_test_overlap_check_cycle();
extern void test_p7_6_delete_o_1();
extern void test_p7_7_remove_kth_from_last();
extern void test_p7_8_remove_duplicated();
extern void test_p7_9_right_shift();
extern void test_p7_10_even_odd_merge();
extern void test_p7_11_is_palindrome();
extern void test_p7_12_list_partition();
extern void test_p7_13_list_int_add();
extern void test_p8_1_max_value();
extern void test_p8_2_calc_rpn();
extern void test_p8_3_parenthesis();
extern void test_p8_4_normalize_path();
extern void test_p8_5_building_suset();
extern void test_p8_6_tree_level();
extern void test_p8_7_circular_queue();
extern void test_p8_8_que_with_stack();
extern void test_p8_9_que_with_max();
extern void test_p9_1_check_balanced();
extern void test_p9_2_check_symetric();
extern void test_p9_3_lca_no_parent_link();
extern void test_p9_4_lca_with_parent_link();
extern void test_p9_5_path_bit_sum();
extern void test_p9_6_find_same_weigh();
extern void test_p9_7_inorder_traverse_loop();
extern void test_p9_8_k_th_ele_in_inorder_traverse();
extern void test_p9_9_successor_o_1();
extern void test_p9_10_traverse_s_1();
extern void test_p9_11_const_tree();
extern void test_p9_12_const_tree_marker();
extern void test_p9_13_leaf_list();
extern void test_p9_14_exterior_node();
extern void test_p9_15_right_sibling();
extern void test_p10_heap_bootcamp();
extern void test_p10_1_merge_sorted();
extern void test_p10_2_sort_k_inc_dec_array();
extern void test_p10_3_sort_almost_sorted();
extern void test_p10_4_nearest_start();
extern void test_p10_5_realtime_median();
extern void test_p10_6_max_k_in_max_heap();
extern void test_00_binarysearch_bootcamp();
extern void test_p11_1_first_k();
extern void test_p11_2_same_value_with_idx();
extern void test_p11_3_min_in_circular_array();
extern void test_p11_4_max_square_root();

int main() {

    std::cout << bracketStr(helloWorld) << std::endl;

    //Chapter 4
    //test_p4_1_parity();
    //test_p4_2_bit_swap();
    //test_p4_3_bit_reverse();
    //test_closed_same_bit_cnt_num();
    //test_add_mul_with_bit_op();
    //test_div_with_bit_op();
    //test_pow_bit_op();
    //test_num_reverse();
    //test_palindrom_num();
    //test_p4_10_random_num_bit_op();
    //test_p4_11_intersect_rec();
    //test_p4_tmp_1_4_align();
    //test_p5_1_dutch_flag_partition();
    //test_p5_2_add_one();
    //test_p5_3_mul_bignum();
    //test_p5_4_array_mv();
    //test_p5_5_rem_dup();
    //test_stock_trading();
    //test_p5_7_stock_trading_twice();
    //test_p5_8_quicksort_repeat_big_small();
    //test_p5_9_generate_prime();
    //test_p5_10_permutation_locating();
    //test_p5_11_permutation_next();
    //test_p5_12_sampling_offline();
    //test_p5_13_sampling_online();
    //test_p5_14_random_permutation();
    //test_p5_15_random_subset();
    //test_p5_16_non_uniform_random();
    //test_p5_17_validate_sudoku_sol();
    //test_p5_18_read_spiral_order();
    //test_p5_19_rotate_right();
    //test_p5_20_pascal_triangle();
    //test_p6_1_itos_stoi();
    //test_p6_2_base_transform();
    //test_p6_3_spreadsheet_colum_num();
    //test_p6_4_replace_rm();
    //test_p6_5_palindrom();
    //test_p6_6_reverse_word();
    //test_p6_7_look_and_say();
    //test_p6_8_roman_to_i();
    //test_p6_9_gen_valid_ip();
    //test_p6_10_snake_string();
    //test_p6_11_string_compress();
    //test_p6_12_rabin_karp_search();
    //test_p7_0_linked_list();
    //test_p7_1_merge_sorted_linkedlist();
    //test_p7_2_reverse_linked_list();
    //test_p7_3_cycle_detect();
    //test_p7_4_overlap_check();
    //test_p7_5_test_overlap_check_cycle();
    //test_p7_6_delete_o_1();
    //test_p7_7_remove_kth_from_last();
    //test_p7_8_remove_duplicated();
    //test_p7_9_right_shift();
    //test_p7_10_even_odd_merge();
    //test_p7_11_is_palindrome();
    //test_p7_12_list_partition();
    //test_p7_13_list_int_add();
    //test_p8_1_max_value();
    //test_p8_2_calc_rpn();
    //test_p8_3_parenthesis();
    //test_p8_4_normalize_path();
    //test_p8_5_building_suset();
    //test_p8_6_tree_level();
    //test_p8_7_circular_queue();
    //test_p8_8_que_with_stack();
    //test_p8_9_que_with_max();
    //test_p9_1_check_balanced();
    //test_p9_2_check_symetric();
    //test_p9_3_lca_no_parent_link();
    //test_p9_4_lca_with_parent_link();
    //test_p9_5_path_bit_sum();
    //test_p9_6_find_same_weigh();
    //test_p9_7_inorder_traverse_loop();
    //test_p9_8_k_th_ele_in_inorder_traverse();
    //test_p9_9_successor_o_1();
    //test_p9_10_traverse_s_1();
    //test_p9_11_const_tree();
    //test_p9_12_const_tree_marker();
    //test_p9_13_leaf_list();
    //test_p9_14_exterior_node();
    //test_p9_15_right_sibling();
    //test_p10_heap_bootcamp();
    //test_p10_1_merge_sorted();
    //test_p10_2_sort_k_inc_dec_array();
    //test_p10_3_sort_almost_sorted();
    //test_p10_4_nearest_start();
    //test_p10_5_realtime_median();
    //test_p10_6_max_k_in_max_heap();
    //test_00_binarysearch_bootcamp();
    //test_p11_1_first_k();
    //test_p11_2_same_value_with_idx();
    test_p11_3_min_in_circular_array();
    test_p11_4_max_square_root();

    return 0;
}